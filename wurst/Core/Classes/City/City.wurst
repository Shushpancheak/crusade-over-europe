package City
import initlater Main
import ClosureForGroups
import CityBaseTaxes
import CityTools
import Revolts
import PublicOrderAddByUnits
import HashMap

//-----------------------------CONSTANTS---------------------------------------
public let kCityRadius = 1500.0
public let kCityRange = kCityRadius

public let kCityLifePercentToCapture = 50.0
public let kCityLifePercentOnceItCaptured = 60.0
public let kCityManaPercentOnceItCapruted = 30.0

public let kCityUnitPOAdd = 0.5

public var cityCount = 0

public let kCityNameSize = 6.0
public let kCityNameLimit = 24

// If the city unit is upgraded, uses this.
let kCityRadiusCheckUpgrade = 300.0
let kCityPopCountRate = 5.0 //   fast count
let kCityFastCount    = kCityPopCountRate
let kCityLongCount    = 120.0 // long count

let kCityTaxLevelTimeToChange = TURN_TIME

// Per month
let kCityPopGrowthRateMinMax = [0.0020, 0.0025]
// tiers
let kCityPopInit = [
  asList(10000, 20000),
  asList(30000, 40000),
  asList(60000, 90000),
  asList(120000, 160000),
  asList(180000, 220000)
]
// Med, Low, High, Harsh
public let kCityTaxLevelMultipliers = [
  1.0,
  0.5,
  1.6,
  2.0
]
public let kCityTaxLevelPOIncrease = [
  0.0,
  20.0,
  -25.0,
  -60.0
]
public let kCityTaxLevelPODecreasePerThousandPop = [
  0.05,
  0.0,
  0.15,
  0.30
]
public let kCityTaxLevelPopModifier = [
  1.0,
  1.1,
  0.85,
  0.7
]


///////////////////////////////////CITY CLASS//////////////////////////////////
public class City

  // Remember to change unit every time!
  private unit city_unit
  private string city_name
  // number of the city in array
  private int city_id
  // id -- int, not big force type.
  private int force_id
  private int player_id
  private vec2 city_pos
  // pop consts
  private int population
  // with deviation
  private int last_pop_growth
  private real population_growth_rate
  // Count public order() if you want the true one, this is the last counted
  private real public_order_last
  // Constant adder to a PO
  private real public_order_add
  private real tax_multiplier
  private int tax_level
  private real last_time_tax_level_changed

  private LinkedList<CityModifier> modifiers


  //=-=-=-=-=-=-=-=-=-=-=-=-=-CONSTRUCT-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-
  // City unit, name of City, Force id(int).
  // tier - is it big city, or a minor one (0, 1, 2)
  construct(unit u, string n, int f_id, int tier)
    tax_level = 0
    last_time_tax_level_changed = 0
    modifiers = new LinkedList<CityModifier>
    tax_multiplier = 1.0
    city_unit = u
    // So that we will know where is it to upgrade if we are (NOT) using dummies
    city_pos = city_unit.getPos()
    city_name = n

    force_id = f_id
    player_id = city_unit.getOwner().getId()

    city_name = n.substring(0, kCityNameLimit)

    city_id = cityCount
    cityCount++

    //=====================CITY ACCIDENTELY DESTROYED==========================

    // EventListener.add(EVENT_PLAYER_UNIT_DEATH) ->
    //   let dying_u = GetDyingUnit()
    //   if dying_u == city_unit
    //     city_unit = CreateUnit(players[player_id], dying_u.getTypeId(), dying_u., bj_UNIT_FACING)
    //     SetUnitState(city_unit, UNIT_STATE_LIFE,
    //       GetUnitState(city_unit, UNIT_STATE_MAX_LIFE) * max(0, kCityLifePercentToCapture) * 0.01)

    //     city_unit.setMana(dying_u.getMana())

    //=================POPULATION MANAGEMENT===================================

    population_growth_rate = getRandomValWithNormalDistribution(kCityPopGrowthRateMinMax[0], kCityPopGrowthRateMinMax[1], -5.0, 5.0, 0.15)
    population = getRandomValWithNormalDistribution(kCityPopInit[tier].get(0).toReal(), kCityPopInit[tier].get(1).toReal(), -5.0, 5.0, 0.15).toInt()
    public_order_add = 0

    //===========================POP COUNT AND MODIFIERS=======================
    // Fast count (for modifiers)
    doPeriodically(kCityPopCountRate / 2 + GetRandomReal(kCityPopCountRate / 2, kCityPopCountRate)) cbPOP ->
      population_growth_rate += GetRandomReal(-0.0001, 0.00015) * population_growth_rate

      int pop_prev = population
      population += (Pow(population * population_growth_rate, 0.8) * kCityTaxLevelPopModifier[tax_level]).toInt()
      int pop_growth = population - pop_prev
      int deviation = GetRandomInt((-0.25 * pop_growth).toInt(), (0.25 * pop_growth).toInt())
      population += deviation

      last_pop_growth = population - pop_prev

      for m in modifiers
        this.getCityModifierOnFastCount(m)

    // TODO make sure it would not cause much lags

    doPeriodically(kCityLongCount / 2 + GetRandomReal(kCityLongCount / 2, kCityLongCount)) cbLONG ->
      let modif_count = kCityModifiersOnLongCount.size()
      let modif = kCityModifiersOnLongCount.get(GetRandomInt(0, modif_count - 1))

      // Normalize chance by multiplying by modif_count
      if getChance(cityModifiers.get(modif).chance * modif_count)
        addModifier(modif)


      // Poverty
      if getChance(population / 500000 - public_order_last / 100 - 0.1)
        addModifier(CityModifier.poverty)

      for m in modifiers
        this.getCityModifierOnLongCount(m)


  // Limit - kCityNameLimit
  function changeCityName(string new_name)
    city_name = new_name.substring(0, kCityNameLimit)

    refreshMultiboardIfPossible()

  function getTaxLevelString() returns string
    return ksTaxLevels[tax_level]

  function getCityNameColored() returns string
    return forces_colors[force_id].toColorString() + city_name + "|r"

  function getCityNameWithForce() returns string
    return ksFactionAdjColored[force_id]  + " city of " + city_name

  function onCityClick(player pl)
    player_stats[pl.getId()].setSelectedCityId(city_id)

  function getCityUnit() returns unit
    return city_unit

  function getCityName() returns string
    return city_name

  function getCityForceId() returns int
    return force_id

  function replaceCity(int unit_id)
    if not kCityTypes.has(unit_id)
      return
    city_unit = ReplaceUnitBJ(city_unit, unit_id, bj_UNIT_STATE_METHOD_RELATIVE)

  function changeOwner(int pl_id)
    if pl_id == PLAYER_NEUTRAL_AGGRESSIVE
      city_unit.setOwner(Player(PLAYER_NEUTRAL_AGGRESSIVE), true)

      // Rebels would set tax to med.
      changeTaxLevelFORCED(0)
    else
      city_unit.setOwner(players[pl_id], true)

    player_id = pl_id
    // If and only if this is a player!
    if pl_id >= 0 and pl_id < PLAYER_SLOTS
      force_id = player_stats[pl_id].getForceId()

    refreshMultiboardIfPossible()

  function settleCity(int pl_id)
    switch force_id
      case kWE
        replaceCity(uCapitolWE1)
      case kBZ
        replaceCity(uCapitolBZ1)
      case kEE
        replaceCity(uCapitolEE1)
      case kME
        replaceCity(uCapitolME1)
    changeOwner(pl_id)

  function grantIndependence()
    replaceCity(uAutonomousTH)

  function capture(player whoCaptures)
    SetUnitLifePercentBJ(city_unit, kCityLifePercentOnceItCaptured)
    SetUnitManaPercentBJ(city_unit, kCityManaPercentOnceItCapruted)

    addModifier(CityModifier.recently_conquered)
    if getChance(cityModifiers.get(CityModifier.massacred_pop).chance)
      addModifier(CityModifier.massacred_pop)
    if getChance(cityModifiers.get(CityModifier.sacked).chance)
      let gld = (kSackCityGoldModifier * countTax()).toInt()

      addModifier(CityModifier.sacked)
      attentionToPlayer("Your warriors have just sacked the city of " + getCityNameColored() + ", giving you " + gld.toString() + " florins!", whoCaptures)
      whoCaptures.addGold(gld)

    // Default is this
    var whoCapturesForceId = force_id
    let whoCapturesId = whoCaptures.getId()
    if (whoCapturesId >= 0 and whoCapturesId < PLAYER_SLOTS)
      whoCapturesForceId = player_stats[whoCapturesId].getForceId()

    if uCapitols.has(city_unit.getTypeId())
      replaceCity(getCapitolByFaction(getCapitolTier(city_unit.getTypeId()), whoCapturesForceId))

    changeOwner(whoCapturesId)
    UnitAddAbility(city_unit, aTownHallCapitolAura)

  function refreshMultiboardIfPossible()
    for i = 0 to PLAYER_SLOTS - 1
      if player_stats[i].getSelectedCityId() == city_id
        player_stats[i].refreshMultiboardCity()

  //========================COUNT TAX==========================================
  /** Tax levels:
   ** 0 - Med
   ** 1 - Low
   ** 2 - High
   ** 3 - Harsh
   **/
  function changeTaxLevel(int lvl)
    if getElapsedTime() - last_time_tax_level_changed >= kCityTaxLevelTimeToChange
      last_time_tax_level_changed = getElapsedTime()

      public_order_add -= kCityTaxLevelPOIncrease[tax_level]
      public_order_add += kCityTaxLevelPOIncrease[lvl]

      tax_level = lvl
    else
      noteToPlayer(ksCannotChangeTaxLevel, players[player_id])

  private function changeTaxLevelFORCED(int lvl)
    public_order_add -= kCityTaxLevelPOIncrease[tax_level]
    public_order_add += kCityTaxLevelPOIncrease[lvl]

    tax_level = lvl

  function countTax() returns int
    var tax = 0

    // Base Tax count
    tax += kCityBaseTaxes.get(city_unit.getTypeId())

    // Count tax by looking to units surrounding city
    //var count_tax = 0
    //let surrounds = GetUnitsInRangeOfLocAll(kCityRadius, Location(city_pos.x, city_pos.y))
    // TODO do this
    //for u in surrounds


    //tax += count_tax

    // Count tax by population
    var pop_tax = (SquareRoot(population.toReal() * max(0.75, countPublicOrder() / 100)) / 6).toInt()

    tax += pop_tax

    // Reduce tax if city is constructing
    // TODO


    tax = (tax * tax_multiplier * kCityTaxLevelMultipliers[tax_level]).toInt()

    return tax

  //========================COUNT PUBLIC ORDER=================================
  function countPublicOrder() returns real
    public_order_last = 100.0 - population_growth_rate * 1000 - SquareRoot(population.toReal()) / 17 + public_order_add - population / 1000 * kCityTaxLevelPODecreasePerThousandPop[tax_level]

    // for units nearby
    // 20 units will increase ~ 10% PO
    forUnitsInRange(city_pos, kCityRange / 3) u ->
      if (not uPlebs.has(u.getTypeId())) and u.getOwner() == players[player_id]
        public_order_last += kCityUnitPOAdd

    forUnitsInRange(city_pos, kCityRange) u ->
      if IsUnitType(u, UNIT_TYPE_STRUCTURE) and u.getOwner() == players[player_id]
        public_order_last += getPublicOrderAddByUnit(u.getTypeId())


    if public_order_last < 0.0
      public_order_last = 0.0
    if public_order_last > 100.0
      public_order_last = 100.0

    if public_order_last < 50.0 and getChance(0.01)
      checkForRevolt(city_id)

    return public_order_last

  function addPublicOrder(real amount)
    public_order_add += amount

  function getLastPublicOrder() returns real
    return public_order_last

  function getPublicOrderStr() returns string
    real po = countPublicOrder()
    color clr = color((255 - po / 100 * 255).toInt(), (po / 100 * 255).toInt(), 0)
    return clr.toColorString().toLowerCase() + po.toInt().toString() + "," + ((po * 10).toInt() % 10).toInt().toString() + "%|r"

  //========================COUNT POP (get)====================================
  function getPopulation() returns int
    return population

  function getPopulationGrowthRate() returns real
    return population_growth_rate

  function getPopulationGrowthRateStr() returns string
    return getStringColoredBasedOnSign((population * population_growth_rate).toInt())

  function getPopulationGrowthStr() returns string
    return getStringColoredBasedOnSign(last_pop_growth)

  function getPopulationStr() returns string
    string str
    if population < 100000
      str = (population / 1000).toInt().toString() + "," + ((population % 1000) / 100).toInt().toString() + "k"
    else
      str = (population / 1000).toInt().toString() + "k"
    return str

  //=========================MODIFIERS=========================================
  function addModifier(CityModifier cm) returns bool
    if modifiers.has(cm)
      return false
    modifiers.add(cm)
    this.getCityModifierOnAdd(cm)
    doAfter(cityModifiers.get(cm).time) ->
      removeModifier(cm)
    return true

  function removeModifier(CityModifier cm) returns bool
    if not modifiers.has(cm)
      return false
    modifiers.remove(cm)
    this.getCityModifierOnRemove(cm)
    return true

  function getModifier(int i) returns CityModifier
    if modifiers.size() <= i
      return CityModifier.NULL
    return modifiers.get(i)

  function getModifiers() returns LinkedList<CityModifier>
    return modifiers

  /** Adds the following portion of pop to the total pop count every 5 secs
  (picks random number within range)
  ** 0 - 0.05%, 0.1%
  ** 1 - 0.1%, 0.3%
  ** 2 - 0.3%, 1%
  ** 3 - 1%, 2%
  */
  private function addPopulation(int tier, real multiplier)
    let prev_pop = population
    population += (multiplier * GetRandomReal(mPortions[tier].get(0), mPortions[tier].get(1)) * population).toInt()
    last_pop_growth += population - prev_pop

  /** this should happen every fast count (5 secs for now) (after city pop counted) */
  function getCityModifierOnFastCount(CityModifier cm)
    let tier = cityModifiers.get(cm).popIncreaseTier
    let mult = cityModifiers.get(cm).popIncreaseMultiplier
    addPopulation(tier, mult)

    if cityModifiers.get(cm).isPOIncreaseConstant == false
      public_order_add -= cityModifiers.get(cm).POIncrease * kCityFastCount / cityModifiers.get(cm).time

  /** this should happen every long count (1 turn) (120 secs for now) */
  function getCityModifierOnLongCount(CityModifier _cm)


  /** this should happen when a cm added to the city*/
  function getCityModifierOnAdd(CityModifier cm)
    public_order_add += cityModifiers.get(cm).POIncrease
    tax_multiplier += cityModifiers.get(cm).taxIncrease

  /** this should happen when a cm removed from the city*/
  function getCityModifierOnRemove(CityModifier cm)
    if cityModifiers.get(cm).isPOIncreaseConstant
      public_order_add -= cityModifiers.get(cm).POIncrease
    tax_multiplier -= cityModifiers.get(cm).taxIncrease


//////////////////////////////////CITY CLASS///////////////////////////////////

public City array cities

// O(1)
public function isCity(unit u) returns bool
  return kCityTypes.has(u.getTypeId())

// -1 - not a city
// O(n)
public function getCityId(unit u) returns int
  for i = 0 to cityCount - 1
    if cities[i].getCityUnit() == u
      return i
  return -1
